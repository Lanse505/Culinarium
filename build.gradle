buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = project.group
version = "$project.minecraft_version-$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version"

java.toolchain() {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTOPENJDK
}

def version_properties = [
        "loader_version"    : loaderVersion,
        "license"           : license,
        "issue_tracker_url" : issueTrackerURL,
        "mod_id"            : modId,
        "version"           : "$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version",
        "mod_name"          : modName,
        "display_url"       : displayURL,
        "forge_version"     : forge_version,
        "description"       : modDesc,
        "mixin_version"     : mixinVersion
]

processResources {
    outputs.upToDateWhen { false }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        include project.mixinPath
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

minecraft {
    mappings channel: project.mappings_type, version: project.mappings_version

    if (project.modTransformer) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "$modId"
            mods {
                culinarium {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "$modId"
            mods {
                culinarium {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "$modId"
            mods {
                culinarium {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "$modId", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                culinarium {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // External Deps
    maven {
        name = 'Mixins'
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = "Titanium"
        url = 'https://maven.blamejared.com/'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    // Local Deps
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin
    annotationProcessor fg.deobf("org.spongepowered:mixin:$mixinVersion:processor")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    finalizedBy 'reobfJar'
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : project.group,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${major_version}-${minor_version}-${patch_version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${project.modId}.mixins.json"
        ])
    }
}

// Setup mixin reference map
mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
